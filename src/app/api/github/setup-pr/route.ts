import { NextRequest, NextResponse } from 'next/server';
import { GitHubClient } from '@/lib/github-client';
import { logger } from '@/lib/logger';
import { cookies } from 'next/headers';

const WORKFLOW_TEMPLATE = `name: Deploy Smart Contract (Keyless)

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-safe-proposal:
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'deploy')
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.38

      - run: bun install --frozen-lockfile
      - run: bun run test
      - run: bun run scripts/create-safe-proposal.ts
      - run: bun run scripts/validate-deployment.ts

      - uses: actions/upload-artifact@v4
        with:
          name: safe-proposal
          path: safe-proposal.json
`;

const DEPLOY_CONFIG_TEMPLATE = `# ZeroKeyCI Deployment Configuration
network: sepolia
contract: YourContract

constructorArgs: []
value: "0"

gasLimit: 5000000
gasPrice: "20000000000"

signers:
  threshold: 2
  addresses:
    - "REPLACE_WITH_SAFE_ADDRESS"
`;

const POLICY_TEMPLATE = `package deployment

min_signers := 2
allowed_networks := ["sepolia", "mainnet", "polygon"]
max_gas_limit := 10000000

default allow = false

allow {
  valid_network
  valid_signers
  valid_gas_limit
}

valid_network { input.network == allowed_networks[_] }
valid_signers { input.signers.threshold >= min_signers }
valid_gas_limit { input.gasLimit <= max_gas_limit }
`;

const PR_BODY_TEMPLATE = `## 🚀 ZeroKeyCI Setup

This PR sets up ZeroKeyCI for automated, keyless smart contract deployment.

### ✅ What's Included

- **GitHub Actions Workflow** (\`.github/workflows/deploy.yml\`)
  - Automated deployment pipeline
  - No private keys required
  - Safe multisig integration

- **Deployment Config** (\`.zerokey/deploy.yaml\`)
  - Network and contract settings
  - Gas configuration
  - Safe signer addresses

- **OPA Policy** (\`.zerokey/policy.rego\`)
  - Security validation rules
  - Network restrictions
  - Gas limit checks

### 🔧 Setup Required

After merging this PR, configure these GitHub Secrets:

1. **SAFE_ADDRESS** - Your Gnosis Safe address
2. **SEPOLIA_RPC_URL** - RPC endpoint for Sepolia (or your network)

### 🎯 How to Use

1. Create a smart contract in \`contracts/\`
2. Update \`.zerokey/deploy.yaml\` with contract name
3. Create a PR with changes
4. Add \`deploy\` label to PR
5. Merge PR → ZeroKeyCI creates Safe proposal automatically

### 📚 Documentation

- [ZeroKeyCI Docs](https://github.com/susumutomita/ZeroKeyCI)
- [Gnosis Safe](https://safe.global)
- [Setup Guide](https://github.com/susumutomita/ZeroKeyCI/blob/main/docs/DEPLOYMENT.md)

---

🤖 Generated by [ZeroKeyCI](https://zerokeyci.dev)
`;

export async function POST(request: NextRequest) {
  try {
    const { owner, repo } = await request.json();

    if (!owner || !repo) {
      return NextResponse.json(
        { error: 'Missing owner or repo' },
        { status: 400 }
      );
    }

    // Get access token
    const cookieStore = await cookies();
    const accessToken = cookieStore.get('github_access_token')?.value;

    if (!accessToken) {
      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });
    }

    const client = new GitHubClient(accessToken);

    // Get repository info
    const repository = await client.getRepository(owner, repo);

    logger.info('Creating ZeroKeyCI setup PR', {
      owner,
      repo,
      default_branch: repository.default_branch,
    });

    // Check if workflow already exists
    const workflowExists = await client.fileExists(
      owner,
      repo,
      '.github/workflows/deploy.yml',
      repository.default_branch
    );

    if (workflowExists) {
      logger.warn('Workflow already exists', { owner, repo });
      return NextResponse.json(
        {
          error:
            'ZeroKeyCI appears to be already configured (deploy.yml exists)',
        },
        { status: 409 }
      );
    }

    // Create PR with all files
    const pr = await client.createPullRequest({
      owner,
      repo,
      title: 'feat: Setup ZeroKeyCI for automated contract deployment',
      body: PR_BODY_TEMPLATE,
      head: 'zerokey-ci-setup',
      base: repository.default_branch,
      files: [
        {
          path: '.github/workflows/deploy.yml',
          content: WORKFLOW_TEMPLATE,
        },
        {
          path: '.zerokey/deploy.yaml',
          content: DEPLOY_CONFIG_TEMPLATE,
        },
        {
          path: '.zerokey/policy.rego',
          content: POLICY_TEMPLATE,
        },
      ],
    });

    logger.info('ZeroKeyCI setup PR created', {
      pr_number: pr.number,
      pr_url: pr.html_url,
    });

    return NextResponse.json({
      success: true,
      pr_number: pr.number,
      pr_url: pr.html_url,
    });
  } catch (error) {
    logger.error('Failed to create setup PR', error as Error);

    return NextResponse.json(
      {
        error: 'Failed to create PR',
        details: (error as Error).message,
      },
      { status: 500 }
    );
  }
}
