name: 'ZeroKeyCI - Keyless Smart Contract Deployment'
description: 'Deploy smart contracts through Gnosis Safe multisig proposals without storing private keys in CI/CD'
author: 'Susumu Tomita'

branding:
  icon: 'lock'
  color: 'purple'

inputs:
  safe-address:
    description: 'Gnosis Safe multisig address for deployment proposals'
    required: true

  network:
    description: 'Network to deploy to (mainnet, sepolia, polygon, polygon-amoy, arbitrum, arbitrum-sepolia, optimism, optimism-sepolia, base, base-sepolia)'
    required: true
    default: 'base-sepolia'

  contract-name:
    description: 'Name of the contract to deploy (must match .sol filename)'
    required: true

  rpc-url:
    description: 'RPC URL for the target network'
    required: true

  deploy-config-path:
    description: 'Path to deployment configuration YAML file'
    required: false
    default: '.zerokey/deploy.yaml'

  policy-path:
    description: 'Path to OPA policy file for deployment validation'
    required: false
    default: '.zerokey/policy.rego'

  verify-blockscout:
    description: 'Whether to verify contract on Blockscout after deployment'
    required: false
    default: 'true'

  blockscout-api-url:
    description: 'Blockscout API URL for contract verification'
    required: false
    default: 'https://eth-sepolia.blockscout.com/api'

  enable-envio:
    description: 'Enable Envio HyperIndex for Safe event indexing'
    required: false
    default: 'false'

  envio-config-path:
    description: 'Path to Envio configuration file'
    required: false
    default: '.zerokey/envio-config.yaml'

outputs:
  proposal-hash:
    description: 'Hash of the created Safe transaction proposal'
    value: ${{ steps.create-proposal.outputs.proposal_hash }}

  safe-address:
    description: 'Safe address where proposal was created'
    value: ${{ steps.create-proposal.outputs.safe_address }}

  chain-id:
    description: 'Chain ID of the target network'
    value: ${{ steps.create-proposal.outputs.chain_id }}

  proposal-json:
    description: 'Path to the generated proposal JSON file'
    value: 'safe-proposal.json'

  verification-status:
    description: 'Status of Blockscout verification (verified/pending/skipped)'
    value: ${{ steps.verify-contract.outputs.status }}

  explorer-url:
    description: 'Blockscout explorer URL for the contract'
    value: ${{ steps.verify-contract.outputs.explorer_url }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "🔍 Validating ZeroKeyCI inputs..."

        if [[ ! "${{ inputs.safe-address }}" =~ ^0x[a-fA-F0-9]{40}$ ]]; then
          echo "::error::Invalid Safe address format"
          exit 1
        fi

        if [[ ! "${{ inputs.network }}" =~ ^(mainnet|sepolia|polygon|polygon-amoy|arbitrum|arbitrum-sepolia|optimism|optimism-sepolia|base|base-sepolia)$ ]]; then
          echo "::error::Unsupported network: ${{ inputs.network }}"
          exit 1
        fi

        echo "✅ Input validation passed"

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: '1.1.38'

    - name: Install ZeroKeyCI dependencies
      shell: bash
      run: |
        echo "📦 Installing ZeroKeyCI..."
        cd ${{ github.action_path }}
        bun install --frozen-lockfile

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: Install calling repository dependencies
      shell: bash
      run: |
        echo "📦 Installing calling repository dependencies..."

        # Check which package manager to use
        if [ -f "bun.lockb" ]; then
          echo "Using Bun..."
          bun install --frozen-lockfile
        elif [ -f "pnpm-lock.yaml" ]; then
          echo "Using pnpm..."
          npm install -g pnpm
          pnpm install --frozen-lockfile
        elif [ -f "yarn.lock" ]; then
          echo "Using Yarn..."
          yarn install --frozen-lockfile
        elif [ -f "package-lock.json" ]; then
          echo "Using npm..."
          npm ci
        elif [ -f "package.json" ]; then
          echo "Using npm (no lockfile)..."
          npm install
        else
          echo "::error::No package.json found in calling repository"
          exit 1
        fi

        echo "✅ Dependencies installed successfully"

    - name: Compile contracts
      shell: bash
      run: |
        echo "🔨 Compiling contracts..."

        # Use locally installed hardhat
        if [ -f "node_modules/.bin/hardhat" ]; then
          ./node_modules/.bin/hardhat compile
        else
          npx hardhat compile
        fi

    - name: Extract deployment configuration
      id: deploy-config
      shell: bash
      run: |
        if [ ! -f "${{ inputs.deploy-config-path }}" ]; then
          echo "::warning::No deployment configuration found at ${{ inputs.deploy-config-path }}, using defaults"
          echo "network=${{ inputs.network }}" >> $GITHUB_OUTPUT
          echo "contract=${{ inputs.contract-name }}" >> $GITHUB_OUTPUT
        else
          NETWORK=$(grep "network:" ${{ inputs.deploy-config-path }} | awk '{print $2}')
          CONTRACT=$(grep "contract:" ${{ inputs.deploy-config-path }} | awk '{print $2}')

          echo "network=${NETWORK:-${{ inputs.network }}}" >> $GITHUB_OUTPUT
          echo "contract=${CONTRACT:-${{ inputs.contract-name }}}" >> $GITHUB_OUTPUT
        fi

        echo "📋 Deployment Configuration:"
        echo "  Network: ${{ inputs.network }}"
        echo "  Contract: ${{ inputs.contract-name }}"

    - name: Validate with OPA policy
      shell: bash
      run: |
        if [ ! -f "${{ inputs.policy-path }}" ]; then
          echo "::warning::No OPA policy found at ${{ inputs.policy-path }}, skipping validation"
          exit 0
        fi

        echo "🔍 Validating deployment against OPA policy..."

        # Install OPA if not present
        if ! command -v opa &> /dev/null; then
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/
        fi

        # Parse YAML to JSON
        cd ${{ github.action_path }}
        bun run scripts/yaml-to-json.ts < ${{ inputs.deploy-config-path }} > deploy-input.json

        # Validate
        opa eval --data ${{ inputs.policy-path }} --input deploy-input.json "data.deployment.allow" --format pretty

        ALLOW=$(opa eval --data ${{ inputs.policy-path }} --input deploy-input.json "data.deployment.allow" --format raw)
        if [ "$ALLOW" != "true" ]; then
          DENY_REASONS=$(opa eval --data ${{ inputs.policy-path }} --input deploy-input.json "data.deployment.deny" --format pretty)
          echo "::error::OPA policy validation failed: $DENY_REASONS"
          exit 1
        fi

        echo "✅ OPA policy validation passed"

    - name: Generate Safe proposal
      id: create-proposal
      shell: bash
      env:
        SAFE_ADDRESS: ${{ inputs.safe-address }}
        ZERO_KEY_PROJECT_ROOT: ${{ github.workspace }}
        CALLING_REPO_ROOT: ${{ github.workspace }}
        GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_PR_AUTHOR: ${{ github.event.pull_request.user.login || github.actor }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_RUN_NUMBER: ${{ github.run_number }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        echo "🔐 Creating Safe transaction proposal..."

        cd ${{ github.action_path }}
        bun run scripts/create-safe-proposal.ts

        PROPOSAL_PATH="${{ github.workspace }}/safe-proposal.json"
        if [ ! -f "$PROPOSAL_PATH" ]; then
          echo "::error::Safe proposal not found at $PROPOSAL_PATH"
          exit 1
        fi

        PROPOSAL_HASH=$(jq -r '.validationHash' "$PROPOSAL_PATH")
        if [ -z "$PROPOSAL_HASH" ] || [ "$PROPOSAL_HASH" = "null" ]; then
          echo "::error::validationHash missing in safe-proposal.json"
          exit 1
        fi
        echo "proposal_hash=$PROPOSAL_HASH" >> $GITHUB_OUTPUT
        echo "safe_address=${{ inputs.safe-address }}" >> $GITHUB_OUTPUT

        CHAIN_ID=$(jq -r '.chainId' "$PROPOSAL_PATH")
        if [ -z "$CHAIN_ID" ] || [ "$CHAIN_ID" = "null" ]; then
          echo "::error::chainId missing in safe-proposal.json"
          exit 1
        fi
        echo "chain_id=$CHAIN_ID" >> $GITHUB_OUTPUT

    - name: Validate proposal structure
      shell: bash
      run: |
        echo "🔍 Validating Safe proposal structure..."

        if [ ! -f "${{ github.workspace }}/safe-proposal.json" ]; then
          echo "::error::Safe proposal not found"
          exit 1
        fi

        jq empty ${{ github.workspace }}/safe-proposal.json || {
          echo "::error::Invalid JSON in safe-proposal.json"
          exit 1
        }

        jq -e '.safeAddress' ${{ github.workspace }}/safe-proposal.json > /dev/null || {
          echo "::error::Missing 'safeAddress' field in proposal"
          exit 1
        }

        jq -e '.proposal' ${{ github.workspace }}/safe-proposal.json > /dev/null || {
          echo "::error::Missing 'proposal' field in proposal"
          exit 1
        }

        jq -e '.chainId' ${{ github.workspace }}/safe-proposal.json > /dev/null || {
          echo "::error::Missing 'chainId' field in proposal"
          exit 1
        }

        echo "✅ Proposal structure validation passed"

    - name: Upload Safe proposal artifact
      uses: actions/upload-artifact@v4
      with:
        name: safe-proposal-${{ github.run_id }}
        path: ${{ github.workspace }}/safe-proposal.json
        retention-days: 30

    - name: Auto-submit to Safe Transaction Service (PKP)
      if: env.PKP_PUBLIC_KEY != ''
      shell: bash
      env:
        PKP_PUBLIC_KEY: ${{ env.PKP_PUBLIC_KEY }}
        LIT_ACTION_IPFS_CID: ${{ env.LIT_ACTION_IPFS_CID }}
        LIT_NETWORK: ${{ env.LIT_NETWORK }}
        SAFE_ADDRESS: ${{ inputs.safe-address }}
        CHAIN_ID: ${{ steps.create-proposal.outputs.chain_id }}
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        echo "🤖 Auto-submitting proposal with PKP..."

        cd ${{ github.action_path }}
        bun run scripts/trigger-pkp-signing.ts ${{ github.workspace }}/safe-proposal.json

        echo "✅ PKP auto-submission completed"

    - name: Post Safe UI link to PR comment
      if: env.PKP_PUBLIC_KEY == ''
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
        GITHUB_SERVER_URL: ${{ github.server_url }}
      run: |
        echo "📱 Posting Safe UI link to PR comment..."

        cd ${{ github.action_path }}
        bun run scripts/post-safe-link-to-pr.ts ${{ github.workspace }}/safe-proposal.json

        echo "✅ PR comment posted with Safe UI link"

    - name: Verify contract on Blockscout
      id: verify-contract
      if: inputs.verify-blockscout == 'true'
      shell: bash
      env:
        CONTRACT_NAME: ${{ inputs.contract-name }}
        BLOCKSCOUT_API_URL: ${{ inputs.blockscout-api-url }}
      run: |
        echo "🔍 Verifying contract on Blockscout..."

        # Note: Verification happens after actual deployment
        # This step prepares the verification configuration

        echo "status=pending" >> $GITHUB_OUTPUT
        echo "explorer_url=${{ inputs.blockscout-api-url }}" >> $GITHUB_OUTPUT

        echo "✅ Blockscout verification configured (will verify after deployment)"

    - name: Setup Envio indexing
      if: inputs.enable-envio == 'true'
      shell: bash
      run: |
        echo "📊 Setting up Envio HyperIndex..."

        if [ ! -f "${{ inputs.envio-config-path }}" ]; then
          echo "::warning::No Envio config found at ${{ inputs.envio-config-path }}"
          exit 0
        fi

        echo "✅ Envio indexing configured"

    - name: Comment on PR with proposal details
      if: github.event_name == 'pull_request'
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        PROPOSAL_HASH="${{ steps.create-proposal.outputs.proposal_hash }}"
        SAFE_ADDRESS="${{ inputs.safe-address }}"
        NETWORK="${{ inputs.network }}"
        CONTRACT="${{ inputs.contract-name }}"

        cat << EOF > pr-comment.md
        ## 🚀 ZeroKeyCI Deployment Proposal

        A keyless Safe transaction proposal has been generated.

        ### 📋 Deployment Details
        - **Contract**: \`${CONTRACT}\`
        - **Network**: \`${NETWORK}\`
        - **Safe Address**: \`${SAFE_ADDRESS}\`
        - **Proposal Hash**: \`${PROPOSAL_HASH}\`

        ### 🔐 Next Steps
        1. Safe owners review and sign the proposal
        2. Once threshold is reached, execute the transaction
        3. Contract will be deployed without any private keys in CI/CD

        ### 📦 Artifacts
        - [Download Proposal](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

        ---
        *Powered by [ZeroKeyCI](https://github.com/susumutomita/ZeroKeyCI) - Keyless Smart Contract Deployment*
        EOF

        gh pr comment ${{ github.event.pull_request.number }} --body-file pr-comment.md

    - name: Summary
      shell: bash
      run: |
        echo "## ✅ ZeroKeyCI Deployment Proposal Created" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Safe Address**: \`${{ inputs.safe-address }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Network**: \`${{ inputs.network }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Contract**: \`${{ inputs.contract-name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Proposal Hash**: \`${{ steps.create-proposal.outputs.proposal_hash }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔐 Security" >> $GITHUB_STEP_SUMMARY
        echo "No private keys were used or stored in this workflow." >> $GITHUB_STEP_SUMMARY
        echo "Safe owners must sign and execute the proposal separately." >> $GITHUB_STEP_SUMMARY
