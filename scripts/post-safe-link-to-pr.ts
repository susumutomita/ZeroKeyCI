#!/usr/bin/env bun
/**
 * Post Safe UI link to GitHub PR comment
 * This helps users understand they need to sign in Safe UI
 */

import { readFileSync } from 'fs';
import { resolve } from 'path';

interface SerializedProposal {
  safeAddress: string;
  chainId: number;
  proposal: {
    to: string;
    value: string;
    data: string;
    operation?: number;
  };
  validationHash?: string;
}

// Network ID to Safe App chain prefix mapping
const CHAIN_PREFIXES: Record<number, string> = {
  1: 'eth', // Ethereum Mainnet
  11155111: 'sep', // Sepolia
  137: 'matic', // Polygon
  80002: 'amoy', // Polygon Amoy
  42161: 'arb1', // Arbitrum One
  421614: 'arb-sep', // Arbitrum Sepolia
  10: 'oeth', // Optimism
  11155420: 'oeth-sep', // Optimism Sepolia
  8453: 'base', // Base
  84532: 'base-sep', // Base Sepolia
};

async function postSafeLinkToPR() {
  // Read proposal file
  const proposalPath = process.argv[2];
  if (!proposalPath) {
    console.error('‚ùå Usage: bun run post-safe-link-to-pr.ts <proposal-path>');
    process.exit(1);
  }

  const proposalContent = readFileSync(resolve(proposalPath), 'utf-8');
  const proposal: SerializedProposal = JSON.parse(proposalContent);

  // Get chain prefix
  const chainPrefix = CHAIN_PREFIXES[proposal.chainId];
  if (!chainPrefix) {
    console.error(
      `‚ùå Unsupported chain ID: ${proposal.chainId}. Please add to CHAIN_PREFIXES.`
    );
    process.exit(1);
  }

  // Build Safe UI URL
  const safeAppUrl = `https://app.safe.global/transactions/queue?safe=${chainPrefix}:${proposal.safeAddress}`;

  // Get GitHub context
  const githubToken = process.env.GITHUB_TOKEN;
  const githubRepository = process.env.GITHUB_REPOSITORY;
  const githubRunId = process.env.GITHUB_RUN_ID;
  const githubServerUrl = process.env.GITHUB_SERVER_URL || 'https://github.com';

  if (!githubToken || !githubRepository) {
    console.log('‚ö†Ô∏è  GitHub context not available. Skipping PR comment.');
    console.log(`\nüì± Safe UI Link:\n${safeAppUrl}\n`);
    return;
  }

  // Build PR comment
  const workflowUrl = `${githubServerUrl}/${githubRepository}/actions/runs/${githubRunId}`;

  const comment = `## üîê ZeroKeyCI: Ready for Signature

Your smart contract deployment proposal has been created successfully!

### üìã Deployment Details
- **Contract**: ${proposal.proposal.to}
- **Network**: Chain ID ${proposal.chainId}
- **Safe Address**: \`${proposal.safeAddress}\`

### ‚úçÔ∏è Next Steps

1. **Open Safe UI**: [Click here to open your Safe](${safeAppUrl})
2. **Create Transaction**: Click "New transaction" ‚Üí "Contract interaction"
3. **Enter Details**:
   - **To address**: \`${proposal.proposal.to}\`
   - **Value (ETH)**: \`${proposal.proposal.value}\`
   - **Contract method selector**: \`${proposal.proposal.data.slice(0, 10)}\`
   - **Call data**: \`${proposal.proposal.data}\`
4. **Sign**: Collect required signatures from Safe owners
5. **Execute**: Click "Execute" to deploy the contract

### üîó Links
- [Safe UI](${safeAppUrl})
- [Workflow Run](${workflowUrl})

---
*ü§ñ This proposal was generated by [ZeroKeyCI](https://github.com/susumutomita/ZeroKeyCI) with zero private keys in CI/CD*
`;

  // Post comment via GitHub API
  try {
    const prNumber = process.env.GITHUB_PR_NUMBER;
    if (!prNumber) {
      console.log('‚ö†Ô∏è  Not a pull request event. Skipping PR comment.');
      console.log(`\nüì± Safe UI Link:\n${safeAppUrl}\n`);
      return;
    }

    const [owner, repo] = githubRepository.split('/');
    const apiUrl = `https://api.github.com/repos/${owner}/${repo}/issues/${prNumber}/comments`;

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${githubToken}`,
        'Content-Type': 'application/json',
        Accept: 'application/vnd.github+json',
      },
      body: JSON.stringify({ body: comment }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        `GitHub API error: ${response.status} ${response.statusText}\n${errorText}`
      );
    }

    console.log('‚úÖ Posted Safe UI link to PR comment');
    console.log(`üì± Safe UI: ${safeAppUrl}`);
  } catch (error) {
    console.error('‚ùå Failed to post PR comment:', error);
    console.log(`\nüì± Safe UI Link:\n${safeAppUrl}\n`);
    // Don't fail the workflow
  }
}

// Run if called directly
if (import.meta.main) {
  postSafeLinkToPR().catch((error) => {
    console.error('Fatal error:', error);
    process.exit(1);
  });
}
