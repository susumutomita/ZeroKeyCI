name: Deploy Smart Contract (Keyless)

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-safe-proposal:
    # Only run when PR is merged with 'deploy' label
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'deploy')

    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.38

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests
        run: |
          bun run test
          bun run test:coverage

      - name: Compile contracts
        run: npx hardhat compile

      - name: Extract deployment configuration
        id: deploy-config
        run: |
          # Check if deployment configuration exists
          if [ ! -f ".zerokey/deploy.yaml" ]; then
            echo "::error::No deployment configuration found at .zerokey/deploy.yaml"
            exit 1
          fi

          # Extract network and contract name
          NETWORK=$(grep "network:" .zerokey/deploy.yaml | awk '{print $2}')
          CONTRACT=$(grep "contract:" .zerokey/deploy.yaml | awk '{print $2}')

          echo "network=$NETWORK" >> $GITHUB_OUTPUT
          echo "contract=$CONTRACT" >> $GITHUB_OUTPUT

          echo "üìã Deployment Configuration:"
          echo "  Network: $NETWORK"
          echo "  Contract: $CONTRACT"

      - name: Generate Safe proposal with gas analysis
        id: create-proposal
        env:
          SAFE_ADDRESS: ${{ secrets.SAFE_ADDRESS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_RUN_NUMBER: ${{ github.run_number }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          GAS_COST_THRESHOLD: ${{ vars.GAS_COST_THRESHOLD || '100' }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          # Create deployment proposal with gas analysis
          echo "üîê Creating Safe transaction proposal with gas analysis..."

          # Run the enhanced proposal creation script
          bun run scripts/create-safe-proposal.ts

          # Set outputs from generated proposal
          PROPOSAL_HASH=$(cat safe-proposal.json | jq -r '.validationHash')
          DEPLOYMENT_ADDRESS=$(cat safe-proposal.json | jq -r '.deployment.expectedAddress')
          ESTIMATED_COST=$(cat safe-proposal.json | jq -r '.gasAnalysis.estimatedCost // "N/A"')

          echo "proposal_hash=$PROPOSAL_HASH" >> $GITHUB_OUTPUT
          echo "deployment_address=$DEPLOYMENT_ADDRESS" >> $GITHUB_OUTPUT
          echo "estimated_cost=$ESTIMATED_COST" >> $GITHUB_OUTPUT

          echo "‚úÖ Safe proposal created successfully"
          echo "üìù Proposal hash: $PROPOSAL_HASH"
          echo "üìç Expected deployment address: $DEPLOYMENT_ADDRESS"
          echo "‚õΩ Estimated gas cost: \$$ESTIMATED_COST"

      - name: Install OPA
        run: |
          # Install Open Policy Agent CLI
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64_static
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name: Validate deployment config with OPA
        run: |
          echo "üîç Validating deployment configuration against OPA policies..."

          # Check if policy file exists
          if [ ! -f ".zerokey/policy.rego" ]; then
            echo "::error::OPA policy not found at .zerokey/policy.rego"
            exit 1
          fi

          # Check if deploy config exists
          if [ ! -f ".zerokey/deploy.yaml" ]; then
            echo "::error::Deployment config not found at .zerokey/deploy.yaml"
            exit 1
          fi

          # Parse YAML to JSON for OPA
          bun run scripts/yaml-to-json.ts < .zerokey/deploy.yaml > deploy-input.json

          # Validate with OPA
          opa eval --data .zerokey/policy.rego --input deploy-input.json "data.deployment.allow" --format pretty

          # Check if validation passed
          ALLOW=$(opa eval --data .zerokey/policy.rego --input deploy-input.json "data.deployment.allow" --format raw)
          if [ "$ALLOW" != "true" ]; then
            echo "::error::OPA policy validation failed"

            # Show deny reasons
            DENY_REASONS=$(opa eval --data .zerokey/policy.rego --input deploy-input.json "data.deployment.deny" --format pretty)
            echo "::error::Deny reasons: $DENY_REASONS"
            exit 1
          fi

          echo "‚úÖ OPA policy validation passed"

      - name: Validate proposal structure
        run: |
          echo "üîç Validating Safe proposal structure..."

          # Check the proposal exists and is valid JSON
          if [ ! -f "safe-proposal.json" ]; then
            echo "::error::Safe proposal not found"
            exit 1
          fi

          # Validate JSON structure
          jq empty safe-proposal.json || {
            echo "::error::Invalid JSON in safe-proposal.json"
            exit 1
          }

          # Validate required fields
          jq -e '.safe' safe-proposal.json > /dev/null || {
            echo "::error::Missing 'safe' field in proposal"
            exit 1
          }

          jq -e '.to' safe-proposal.json > /dev/null || {
            echo "::error::Missing 'to' field in proposal"
            exit 1
          }

          jq -e '.data' safe-proposal.json > /dev/null || {
            echo "::error::Missing 'data' field in proposal"
            exit 1
          }

          echo "‚úÖ Proposal structure validation passed"

      - name: Upload Safe proposal artifact
        uses: actions/upload-artifact@v4
        with:
          name: safe-proposal-${{ github.event.pull_request.number }}-${{ github.sha }}
          path: safe-proposal.json
          retention-days: 30

      - name: Verify contract on Blockscout
        if: success()
        env:
          CONTRACT_ADDRESS: ${{ steps.create-proposal.outputs.contract_address }}
          CONTRACT_NAME: ${{ steps.deploy-config.outputs.contract }}
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
        run: |
          echo "üîç Verifying contract on Blockscout..."

          # Run Blockscout verification script
          bun run scripts/blockscout-verify.ts $CONTRACT_ADDRESS

          echo "‚úÖ Blockscout verification complete"

      - name: Setup Blockscout MCP Integration
        if: success()
        run: |
          echo "ü§ñ Setting up Blockscout MCP integration..."

          # MCP server configuration
          cat > .zerokey/mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "blockscout": {
                "command": "docker",
                "args": [
                  "run",
                  "--rm",
                  "-i",
                  "ghcr.io/blockscout/mcp-server:latest"
                ],
                "env": {
                  "BLOCKSCOUT_API_URL": "https://eth-sepolia.blockscout.com/api",
                  "CONTRACT_ADDRESS": "${{ steps.create-proposal.outputs.contract_address }}"
                }
              }
            }
          }
          EOF

          echo "‚úÖ MCP integration configured"
          cat .zerokey/mcp-config.json

      - name: Trigger PKP signing (if configured)
        id: pkp-signing
        if: env.PKP_PUBLIC_KEY != '' && env.LIT_ACTION_IPFS_CID != ''
        env:
          PKP_PUBLIC_KEY: ${{ secrets.PKP_PUBLIC_KEY }}
          LIT_ACTION_IPFS_CID: ${{ secrets.LIT_ACTION_IPFS_CID }}
          LIT_NETWORK: ${{ secrets.LIT_NETWORK || 'datil-dev' }}
          SAFE_ADDRESS: ${{ secrets.SAFE_ADDRESS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "üîê Triggering Lit Protocol PKP signing..."

          # Run PKP signing script
          bun run scripts/trigger-pkp-signing.ts safe-proposal.json

          # Check if signing succeeded
          if [ $? -eq 0 ]; then
            echo "‚úÖ PKP signing completed successfully"
            echo "pkp_signed=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  PKP signing failed, manual signing required"
            echo "pkp_signed=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR with proposal details
        uses: actions/github-script@v7
        with:
          script: |
            const proposalHash = '${{ steps.create-proposal.outputs.proposal_hash }}';
            const safeAddress = process.env.SAFE_ADDRESS;
            const network = '${{ steps.deploy-config.outputs.network }}';
            const contract = '${{ steps.deploy-config.outputs.contract }}';
            const pkpSigned = '${{ steps.pkp-signing.outputs.pkp_signed }}' === 'true';

            let comment = `## üöÄ Deployment Proposal Created

            A Safe transaction proposal has been generated for this deployment.

            ### üìã Deployment Details
            - **Contract**: \`${contract}\`
            - **Network**: \`${network}\`
            - **Safe Address**: \`${safeAddress}\`
            - **Proposal Hash**: \`${proposalHash}\``;

            if (pkpSigned) {
              comment += `

            ### üîê PKP Signing Status
            ‚úÖ **Lit Protocol PKP has signed this proposal**

            The PKP has verified:
            - OPA policy validation passed
            - All tests passed
            - PR was properly merged

            Additional Safe owners can review and sign, or execute directly if threshold is met.`;
            } else {
              comment += `

            ### üîê Next Steps
            1. Safe owners can review and sign the proposal
            2. Once threshold is reached, execute the transaction
            3. Contract will be deployed at deterministic address`;
            }

            comment += `

            ### üì¶ Artifacts
            - [Download Proposal](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            ### ‚úÖ Validation Status
            - Tests: ‚úÖ Passed
            - Coverage: ‚úÖ 100%
            - OPA Policy: ‚úÖ Validated

            ---
            *Generated by ZeroKeyCI - Keyless Smart Contract Deployment*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

  # Optional: Notify external services
  notify-deployment:
    needs: create-safe-proposal
    if: success()
    runs-on: ubuntu-latest

    steps:
      - name: Send notification
        run: |
          echo "üì® Sending deployment notifications..."
          # Note: Notifications are now sent automatically by create-safe-proposal.ts
          # Supports: GitHub PR comments, Slack webhooks, Discord webhooks
          # Configure via: SLACK_WEBHOOK_URL and DISCORD_WEBHOOK_URL secrets
          # TODO: Trigger Safe transaction monitoring
          # TODO: Update deployment dashboard